;;; Quelques exemples.                 -*- mode: lisp-data; coding: utf-8 -*-


(def ex1 10)                                                     ; ↝ 10 : Int

(def ex2 (+ 5 3))                                                ; ↝ 8 : Int

(dec ex3 (Int -> Int))                                            ; ↝ <fonction> : Int -> Int
(def ex3 (fun x (* x 2)))                        
(def ex4 (ex3 5))                                                  ; ↝ 10 : Int

(dec result3 Int)
(def result3 (let ((ex5 (ex3 5))) (* ex5 3)))             ; ↝ 30 : Int

(def ex6 ((* (: 2 Int)) (: 7 Int)))                                  ; ↝ 14 : Int

(dec mult3ints (Int Int Int -> Int))
(def mult3ints (fun x (fun y ( fun z (* (* x y) z)))))               ; ↝ <fonction> : Int -> Int -> Int -> Int
(def result4 (mult3ints 5 2 7))                                      ; ↝ 70 : Int

(dec divise (Int Int Int -> Int))
(def divise (fun x (fun y  (fun z (/ x (/ y z))))))                 ; ↝ <fonction> : Int -> Int -> Int -> Int

(def result5 (divise 5 3 2))                                         ; ↝ 5 : Int

;(def result6 (divise 3 2 3))                                       ; ↝ 0 : error on peux pas diviser par 0

(dec sum5Ints (Int Int Int Int Int -> Int))
(def sum5Ints (fun a (fun  b (fun  c (fun d (fun  e (+ (+ (+ (+ a b) c) d) e)))))))  ; ↝ <fonction> : Int -> Int -> Int -> Int -> Int -> Int
(def result7 (sum5Ints 1 2 3 4 5)) ; ↝ 15 : Int

(dec fonct (Int Int Int -> Int))
(def fonct (fun x (fun y (fun z (* z 50)))))                ; ↝ <fonction> : Int -> Int -> Int

(dec recursive Int )
(def recursive (fonct recursive 5 3))                ; ↝ 150 : Int

(def r24 (let ((x 15)                             ; 36 : Int
               (y 3)
               (z (+ x y)))
           (* z 2)))

(def macro-id (macro (fun s s )))            ;12223 : Int
(def r0 (macro-id 12223))

(def fonct1
  (macro (fun body (moremacro
                   (fun arg (cons (cons 'fun arg) body))))))
(def r1 (: (fonct1 (- x 5) x) (Int -> Int))) 
(def r2 (r1 9))                                         ; 4 : Int

(def multi-macro
     (macro (fun args
                 (moremacro
                  (fun body
                       (let ((head (car args)))
                         (let ((tail (cdr args)))
                           (let ((tailfun (cons (cons 'fun tail) body)))
                             (if (nil? head)
                                 (cons 'macro tailfun)
                               (cons (cons 'multi-macro head)
                                     (cons 'moremacro tailfun)))))))))))

(def fonct2 (multi-macro (arg body) (cons (cons 'fun arg) body)))
(def r3 (: (fonct2 y (* y 2)) (Int -> Int)))
(def r4 (r3 10))                                                 ;  20  : Int

(def r5 (let ((f (: (fun x (- x 100)) (Int -> Int)))) f 100))       ;   0 : Int


(def defmacro (multi-macro (name args body)
                           (cons (cons 'def name)
                                 (cons (cons 'multi-macro args) body))))
(defmacro and (e1 e2 e3)                                        ; and avec 3 arguments
  (cons (cons ': (cons (cons (cons 'if e1) e2) e3)) 'Bool))

(def r6 (and true true true))
(def r7 (and true false true))
(def r8 (and false false true))



;;____________________________________ ces tests marche pas mais couvre toutes les implementations


;;(dec divide (Int Int -> Int))               ; 5 : Int contien une declaration
;;(def divide (Lambda (x y) (/ x y)))
;;(def r11 (divide 10 2))

;;(defmacro ift (cond then else)
;;  `(if ,cond ,then ,else))
;;(def r9 (ift true 42 0))        ; ↝ 42 : Int
;;(def r10 (ift false 42 0))        ; ↝ 0 : Int

;;(defmacro Lambda (args body)    
;;  `(fn ,args ,body))                    
;;
;;(dec plus (Int Int -> Int))
;;(def plus (Lambda (x y) (+ x y)))
;;(def r13 (plus 5 9))

;;(def sum-list
;;  (Lambda (lst)
;;    (if (nil? lst)
;;        0
;;       (+ (car lst) (sum-list (cdr lst))))))

